import pandas as pd
from io import StringIO
import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use('seaborn-v0_8')

def load_data():
    try:
        col_widths = [
            (1, 8),
            (9, 16),
            (17, 24),
            (25, 32)
        ]

        data = []
        with open('babyboom.dat.txt', 'r') as file:
            for line in file:
                row = []
                for start, end in col_widths:
                    value = line[start - 1:end].strip()
                    row.append(value)
                data.append(row)

        columns = ['Time', 'Sex', 'Birth_weight', 'Minutes_after_midnight']
        df = pd.DataFrame(data, columns=columns)

        numeric_cols = ['Birth_weight', 'Minutes_after_midnight']
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col].str.replace(' ', ''), errors='coerce')

    except Exception as e:
        print(f"–ü–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ —á—Ç–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}. –ü—Ä–æ–±—É–µ–º –≤—Ç–æ—Ä–æ–π –º–µ—Ç–æ–¥...")
        with open('babyboom.dat.txt', 'r') as f:
            df = pd.read_fwf(StringIO(f.read()), header=None,
                             names=["Time", "Sex", "Birth_weight", "Minutes_after_midnight"])

    return df


df = load_data()

def print_statistics():
    numeric_cols = ['Birth_weight', 'Minutes_after_midnight']

    print("\nüìã –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(df[numeric_cols].describe().round(3))

    print("\nüìà –î–∏—Å–ø–µ—Ä—Å–∏—è:")
    print(df[numeric_cols].var().round(3))

    print("\nüîó –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π:")
    print(df[numeric_cols].corr().round(3))


def plot_single_column():
    numeric_cols = ['Birth_weight', 'Minutes_after_midnight']
    col_names = ['–í–µ—Å –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏ (–≥)', '–ú–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏']

    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:")
    for i, (col, name) in enumerate(zip(numeric_cols, col_names), 1):
        print(f"{i}. {name}")

    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: ")

    if choice.isdigit() and 1 <= int(choice) <= len(numeric_cols):
        selected_col = numeric_cols[int(choice) - 1]
        selected_name = col_names[int(choice) - 1]

        plt.figure(figsize=(12, 5))

        plt.subplot(1, 2, 1)
        sns.histplot(df[selected_col], kde=True, bins=15)
        plt.title(f'–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {selected_name}')
        plt.xlabel(selected_name)
        plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')

        plt.subplot(1, 2, 2)
        sns.boxplot(y=df[selected_col])
        plt.title(f'–Ø—â–∏–∫ —Å —É—Å–∞–º–∏: {selected_name}')

        plt.tight_layout()
        plt.show()
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")


def plot_distributions(plot_type='hist'):
    fig, ax = plt.subplots(1, 2, figsize=(14, 6))
    for i, col in enumerate(['Birth_weight', 'Minutes_after_midnight']):
        title = '–≤–µ—Å–∞ –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏ (–≥)' if i == 0 else '–≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è'

        if plot_type == 'hist':
            sns.histplot(df[col], kde=True, ax=ax[i], bins=15)
        else:
            sns.boxplot(x=df[col], ax=ax[i])

        ax[i].set_title(f'{title.capitalize()}')
        ax[i].set_xlabel('–í–µ—Å (–≥)' if i == 0 else '–ú–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏')
        if plot_type == 'hist': ax[i].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')

    plt.suptitle(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {plot_type.replace("hist", "–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞").replace("box", "—è—â–∏–∫ —Å —É—Å–∞–º–∏")}')
    plt.tight_layout()
    plt.show()


def analyze_data():
    numeric_df = df[['Birth_weight', 'Minutes_after_midnight']].apply(pd.to_numeric, errors='coerce').dropna()

    stats = numeric_df.describe()
    stats.loc['variance'] = numeric_df.var()

    plt.figure(figsize=(10, 4))
    sns.heatmap(stats, annot=True, cmap='viridis', fmt='.2f')
    plt.title('–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    plt.tight_layout()
    plt.show()

    corr = numeric_df.corr()
    plt.figure(figsize=(6, 4))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f', center=0)
    plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
    plt.tight_layout()
    plt.show()

    Q1 = numeric_df.quantile(0.25)
    Q3 = numeric_df.quantile(0.75)
    IQR = Q3 - Q1
    outliers = ((numeric_df < (Q1 - 1.5 * IQR)) | (numeric_df > (Q3 + 1.5 * IQR))).sum()

    outliers_df = pd.DataFrame({
        'variable': outliers.index,
        'outliers': outliers.values
    })

    plt.figure(figsize=(8, 4))
    sns.barplot(x='variable', y='outliers', hue='variable', data=outliers_df,
                legend=False)
    plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤')
    plt.xlabel('–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤')
    plt.tight_layout()
    plt.show()

def main_menu():
    while True:
        print("\n" + "=" * 50)
        print("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –û –ù–û–í–û–†–û–ñ–î–ï–ù–ù–´–•".center(50))
        print("=" * 50)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("2. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è")
        print("3. –í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å")
        print("4. –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ")

        if choice == '1':
            plot_distributions('hist')
            plot_distributions('box')
            analyze_data()
        elif choice == '2':
            plot_single_column()
        elif choice == '3':
            print_statistics()
        elif choice == '4':
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")


if __name__ == "__main__":
    main_menu()
